import { useEffect, useState, FC, useRef } from "react";
import { useRouter } from "next/router";
import Head from "next/head";
import { useErrorContext } from "@/context/error.context";
import { renderAfterCheck } from "@/helper/helper";
import api from "@/api/api";
import { CoinAsset, DisplayData, Price } from "../../../types";
import PriceComp from "./_children/price";
import LabelUpdateEffect from "@/components/label-update/label-update.componet";
import Desc from "./_children/desc";
import { useLoadingContext } from "@/context/loading.context";
import LoadingUI from "./_children/loading-ui";
import { TbArrowBackUp } from "react-icons/tb";

const Pair = () => {
  const [coinAsset, setCoinAsset] = useState<CoinAsset | undefined>();
  const { error, setError } = useErrorContext();
  const { setIsLoading } = useLoadingContext();

  const [price, setPrice] = useState<Price | null>(null);
  const router = useRouter();

  const { pair } = router.query;

  const { validPair, crypto, fiat } = handlePair(router.isReady, pair);

  //learn what is the response if the pair is not valid
  useEffect(() => {
    //simulate real world
    setTimeout(() => {
      setIsLoading(false);
    }, 150);

    if (!router.isReady || !validPair) return;

    const handleSinglePair = async () => {
      //fetching
      try {
        const [coinsAsset, initialPrice] = await Promise.all([
          api.getCoinAsset(crypto!),
          api.getFullPrice(crypto!),
        ]);
        const { Data } = coinsAsset;
        if (initialPrice.Response === "Error")
          setError("Looks like this pair is removed or not valid");
        setCoinAsset(Data);
        setPrice(initialPrice);
      } catch (error) {
        const typedError = error as Error;
        setError(typedError.message);
      }
    };
    handleSinglePair();
  }, [router.isReady, pair]);

  //className getter function for 24hour change
  const getClassName = (CHANGE24HOUR: number) => {
    if (typeof CHANGE24HOUR != "number") return "up-or-down no-change";
    switch (true) {
      case CHANGE24HOUR === 0:
        return "up-or-down no-change";
      case CHANGE24HOUR > 0:
        return "up-or-down up";
      default:
        return "up-or-down down";
    }
  };

  const goBack = () => router.back();

  if (error || !validPair) return <>There has been an error : {error}</>;
  if (!router.isReady || !coinAsset || !price || !crypto || !pair)
    return <LoadingUI />;

  const USD_DISPLAY_FIAT = price.DISPLAY[crypto.toUpperCase()].USD;

  const USD_RAW_FIAT = price.RAW[crypto.toUpperCase()].USD;

  const { PRICE, CHANGE24HOUR } = USD_DISPLAY_FIAT;
  const { CHANGE24HOUR: RCHANGE24HOUR } = USD_RAW_FIAT;

  const Info = getInfo(USD_DISPLAY_FIAT);

  return (
    <>
      <Head>
        {coinAsset?.SYMBOL ? (
          <title>
            Coinify - {coinAsset?.SYMBOL}/USD {PRICE}
          </title>
        ) : (
          <title>Coinify</title>
        )}
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="detailed-card">
        <div
          onClick={goBack}
          style={{
            textAlign: "left",
            width: "fit-content",
            marginTop: "1rem",
            cursor: "pointer",
          }}
        >
          Go back <TbArrowBackUp />
        </div>
        <div className="important-info">
          <div className="coin-profile">
            <div>
              <img
                className="coin-image"
                src={coinAsset?.LOGO_URL}
                alt={coinAsset?.SYMBOL}
              />
            </div>
            <div>
              <div className="img-name">
                {coinAsset.NAME} Price <span>({coinAsset.SYMBOL})</span>
              </div>
              <PriceComp
                crypto={crypto}
                fiat={fiat}
                price={PRICE}
                setPrice={setPrice}
              />
            </div>
          </div>
          <div className={getClassName(RCHANGE24HOUR)}>
            <div title="Change in 24 hours">
              {CHANGE24HOUR ? CHANGE24HOUR : "Error"}
            </div>
          </div>
        </div>
        <div className="other-info">
          <input
            type="checkbox"
            name="other-info-toggler"
            id="other-info-toggler"
          />
          <div className="toggle-data-wrapper">
            <div className="toggle-data">
              {Info.map((item, i) => (
                <RenderData key={i} {...item} />
              ))}
            </div>
            <div className="toggler-label-more">
              <label htmlFor="other-info-toggler">More stats</label>
            </div>
            <div className="toggler-label-less">
              <label htmlFor="other-info-toggler">Less stats</label>
            </div>
          </div>
        </div>
        <article className="desc-summary">
          <Desc coinAsset={coinAsset} />
        </article>
      </div>
    </>
  );
};

export default Pair;

const RenderData: FC<{ label: string; value: string | number }> = ({
  label,
  value,
}) => {
  const ref = useRef<HTMLSpanElement>(null);
  return (
    <div>
      <div>{label}</div>
      <div>
        <LabelUpdateEffect _ref={ref} value={value} classToToggle="updated">
          <span ref={ref}>{renderAfterCheck(value)}</span>
        </LabelUpdateEffect>
      </div>
    </div>
  );
};

const getInfo = ({
  VOLUME24HOUR,
  CIRCULATINGSUPPLYMKTCAP,
  LASTMARKET,
  LOW24HOUR,
  LOWDAY,
  LOWHOUR,
  OPENDAY,
  OPENHOUR,
}: DisplayData) => [
  {
    label: "24H Volume :",
    value: VOLUME24HOUR,
  },
  {
    label: "Circulating Supply Market Cap :",
    value: CIRCULATINGSUPPLYMKTCAP,
  },
  {
    label: "Last Market :",
    value: LASTMARKET,
  },
  {
    label: "24 Hour Low :",
    value: LOW24HOUR,
  },
  {
    label: "Daily Lowest :",
    value: LOWDAY,
  },
  {
    label: "Hourly Lowest : ",
    value: LOWHOUR,
  },
  {
    label: "Daily Open : ",
    value: OPENDAY,
  },
  {
    label: "Hourly Open : ",
    value: OPENHOUR,
  },
];

const handlePair = (isReady: boolean, pair: string | undefined | string[]) => {
  if (!isReady)
    return {
      validPair: false,
      crypto: null,
      fiat: null,
    };
  if (!pair)
    return {
      crypto: null,
      fiat: null,
      validPair: false,
    };
  if (Array.isArray(pair))
    return {
      crypto: null,
      fiat: null,
      validPair: false,
    };
  const [crypto, fiat] = pair.split("-");
  if (fiat != "usd" || fiat.toUpperCase() != "USD")
    return {
      validPair: false,
      crypto: null,
      fiat: null,
    };
  return {
    crypto,
    fiat,
    validPair: true,
  };
};
