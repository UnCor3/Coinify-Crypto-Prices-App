import CoinCardComponent from "@/components/coin-card/coin-card.component";
import PaginationComponent from "@/components/pagination/pagination.component";
import "react-loading-skeleton/dist/skeleton.css";
import Skeleton from "react-loading-skeleton";
import Head from "next/head";
import { useErrorContext } from "@/context/error.context";
import { usePaginationContext } from "@/context/pagination.context";
import { useEffect, useState, useRef } from "react";
import { useWSContext } from "@/context/ws.context";
import { ErrorBoundary } from "react-error-boundary";
import { getSubList } from "@/helper/helper";
import { useRouter } from "next/router";
import { CoinData, SubList } from "../../types";
import api from "@/api/api";
import { getProperInfo } from "../util/getPrice";
import Notice from "@/components/notice/notice.component";
import RenderError from "@/components/render-error/render-error.component";
import { useLoadingContext } from "@/context/loading.context";

export default function Home() {
  const [coins, setCoins] = useState<null | CoinData[]>(null);
  const { error, setError } = useErrorContext();
  const { page, rows } = usePaginationContext();
  const { reconnect, socket, disconnect, destroy } = useWSContext();
  const isSubListSent = useRef<boolean>(false);
  const subList = useRef<SubList>([]);
  const router = useRouter();
  const { setIsLoading } = useLoadingContext();

  //responsible for fetching coins list
  //and cleaning up subscriptions
  //as params change
  useEffect(() => {
    //another route may caught an error
    //since the state is shared we have to
    //setError to empty string
    if (error) setError("");
    if (!router.isReady) return;
    setIsLoading(false);

    const getCoins = async () => {
      const data = await api.getCoinsList(page, rows, setError);
      //@ts-ignore
      setCoins(data);
    };
    getCoins();
    return () => {
      //disconnect from ws
      //if page or rows changes
      //router will make this useEffect cleanup run twice
      //so we have to check if we sent a req
      if (isSubListSent) {
        disconnect(subList.current);
        isSubListSent.current = false;
      }
    };
  }, [router.isReady, page, rows]);

  //Websocket connection here
  useEffect(() => {
    if (!coins || isSubListSent.current || !socket) return;
    socket.onmessage = (msg) => {
      const parsed = JSON.parse(msg.data);
      console.log(msg);
      try {
        //Throwing error
        if (parsed.TYPE == 429)
          setError(
            "Due to api plan limitations you cannot have more than one tab open , please close other tabs and refresh the page.",
          );

        if (parsed.TYPE == 401 && parsed.MESSAGE === "INVALID_PARAMETER") {
          setError("Looks like your api key is not valid");
        }

        //if the type is 5 than it's the data we want
        if (parsed.TYPE === "5" && coins) {
          //finding the correct index of the coin
          const indexOfCoin = coins.findIndex((item) => {
            if (item.RAW && item.RAW.USD)
              return item.RAW.USD.FROMSYMBOL === parsed.FROMSYMBOL;
          });

          //Editing the object with the data

          coins[indexOfCoin] = {
            ...coins[indexOfCoin],
            WS_DATA: parsed,
          };

          //Setting the state
          setCoins(() => [...coins]);
        }
      } catch (error) {
        const typedError = error as Error;
        setError(typedError.message || "Error with web socket connection");
      }
    };

    subList.current = getSubList(coins);
    reconnect(subList.current);
    isSubListSent.current = true;
  }, [coins]);

  //If there is an error
  if (error)
    return (
      <>
        <Head>
          <title>Something went wrong</title>
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <RenderError error={error} />
      </>
    );

  const key = process.env.NEXT_PUBLIC_API_KEY;

  if (!key || key === "<YOUR_API_KEY>") {
    destroy();
    return (
      <div style={{ margin: "1rem", marginTop: "4rem" }}>
        Hey looks like you forgot to add your api key to .env.local file,get
        yours for free{" "}
        <a
          href="https://min-api.cryptocompare.com/pricing"
          style={{ fontWeight: "bolder" }}
          about="_blank"
        >
          here
        </a>
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>Coinify - Index</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="coins-wrapper">
          <hr />
          <div className="chart-detail">
            <div className="head">
              <div className="detail">Coin</div>
            </div>
            <div className="other-chart-info">
              <div className="detail">Name</div>
              <div className="detail">Price</div>
              <div className="detail">24H Change</div>
            </div>
          </div>
          <hr />
          <ErrorBoundary
            fallback={<div>Something really unexpected has accrued</div>}
          >
            {coins ? (
              coins.map((item, i) => (
                // card component
                <CoinCardComponent
                  key={item.CoinInfo.Name}
                  item={getProperInfo(item)}
                />
              ))
            ) : (
              //Loading effect using react skeleton
              <Skeleton count={10} height={71.5} duration={0.5} />
            )}
          </ErrorBoundary>
        </div>
        <PaginationComponent currentPage={page} />
        <Notice />
      </main>
    </>
  );
}
